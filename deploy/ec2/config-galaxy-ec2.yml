# config-galaxy-ec2.yml
#
#  Perform initial package install, config, and user creation on each node. 
#
#  Run cmd: ansible-playbook -i ec2.py --extra-vars="@your-variable-file.yml" config-galaxy-ec2.yml 

- name: Config DB nodes
  hosts: "{{ galaxy_hosts_db }}" 
  become: yes
  roles:
    - role: postgresql
    - role: memcached
    - role: rabbitmq

- name: Set secondary IP
  hosts: "{{ galaxy_hosts_db }}" 
  gather_facts: no
  tasks:

    # Figure out the IP address of the slave node
    - name: Set secondary_ip 
      set_fact:
        secondary_ip: "{% for host in groups[galaxy_hosts_db] %}{% if hostvars[host]['ec2_tag_galaxy_postgres'] == 'slave' %}{{ hostvars[host]['ec2_private_ip_address'] }}{% endif %}{% endfor %}"
      when: ec2_tag_galaxy_postgres == 'master'

- name: Config DB replication
  hosts: "{{ galaxy_hosts_db }}" 
  become: yes
  roles:
    # Update conf file, and disable hot_standby on the master node 
    - role: config-postgres-replication
      hot_standby: "off"
      galaxy_secondary_ip: "{{ secondary_ip }}"
      when: ec2_tag_galaxy_postgres == 'master'

    # Update conf file, and enable hot_standby on the slave node 
    - role: config-postgres-replication
      hot_standby: "on"
      when: ec2_tag_galaxy_postgres == 'slave'

- name: Config CELERY nodes 
  hosts: "{{ galaxy_hosts_celery }}" 
  become: yes
  roles:
    - role: galaxy-config
      inventory_group: celery

      # only install what we require for celery
      yum_pacakges:
        - python-pip
        - python-psycopg2
        - python-setuptools
        - PyYAML
        - libzip-devel
        - freetype-devel
        - libffi-devel
        - openssl-devel

    - role: supervisor
      celery_type: "{{ ec2_tag_galaxy_celery_queue }}" 

- name: Config WEB nodes 
  hosts: "{{ galaxy_hosts_web }}" 
  become: yes
  roles:
    - role: galaxy-config
      inventory_group: web
    - role: selinux

- name: Define elasticsearch_nodes
  hosts: "{{ galaxy_hosts_elastic }}" 
  gather_facts: no
  tasks:
    - name: Set elasticsearch_nodes
      set_fact:
        elasticsearch_nodes: "{% for host in groups[galaxy_hosts_elastic] %}\"{{ hostvars[host]['ec2_private_ip_address'] }}\"{% if not loop.last %},{% endif %}{% endfor %}"

- name: Config ES nodes
  hosts: "{{ galaxy_hosts_elastic }}"
  become: yes
  roles:
    - role: elasticsearch
      private_ip: "{{ ec2_private_ip_address }}"
      es_node_list: "{{ elasticsearch_nodes }}"

