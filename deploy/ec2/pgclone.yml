# pgclone.yml
#
# Run on the slave host. 
#
# run cmd: ansible-playbook -i ec2.py --extra-vars="@your-vars-file.yml" pgclone.yml

---
- name: Determine the IP address of the master host
  hosts: "{{ galaxy_hosts_db }}"
  gather_facts: no
  tasks: 
    - name: Set galaxy_master_ip
      set_fact:
        galaxy_master_ip: "{% for host in groups[galaxy_hosts_db] %}{% if hostvars[host]['ec2_tag_galaxy_postgres'] == 'master' %}{{ hostvars[host]['ec2_private_ip_address'] }}{% endif %} {% endfor %}"
 
- name: Clone the master database to the slave 
  hosts: "{{ galaxy_hosts_db }}"
  become: yes
  vars:
  roles:
    - role: chouseknecht.pgclone 
      pgbase_output_dir: /var/lib/pgsql/data
      pgbase_backup_dir: /tmp

      # Recover file options
      pgbase_create_recovery_file: True
      pgbase_standby_mode: "on"
      pgbase_trigger_file: "/tmp/trigger"

      # The remote host with the database we want to copy
      pgbase_connect_host: "{{ galaxy_master_ip }}" 
      pgbase_connect_port: 5432
      pgbase_connect_user: "{{ galaxy_replicator_user }}" 
      pgbase_connect_pass: "{{ galaxy_replicator_pass }}" 

      # The data directory will be removed. Add to the list any files that should be saved. 
      pgbase_save_files:
      - pg_hba.conf
      - postgresql.conf

      # Only run on the slave node
      when: ec2_tag_galaxy_postgres == 'slave'
